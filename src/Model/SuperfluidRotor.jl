include("LinearRotor.jl")

"""
## Rotor
`N`: Number of Particle
`B`: Beads of Path
`Z`: Atomic Number

# Set the Model
`N`: Number of Particle
`B`: Beads of Path
`T`: Temperature/K

`U`: Atomic unit (default)
`am2An` Unit Transform PE(Atomic*am2An)
"""
struct SuperfluidRotor{I<:Integer,F<:Real,PES_r,PES_f}
    N::I
    B::I
    m::F
    rRB::I
    œÑ::F
    E2e::F
    Linear_rotor::Function
    rotor::PES_r
    superfluid::PES_f
end

function SuperfluidRotor(‚Ñì::SuperfluidFixRotor, T, m::Real, RB::Int,LB::Real)
    @unpack N, B, œÑ, E2e, rotor, superfluid = ‚Ñì
    
    return SuperfluidRotor(
        N,B,m,RB,œÑ,E2e,
        LinearRotor(1.4387752224LB/(T*RB)),
        rotor,superfluid
        )
end

function SuperfluidRotor(
    N::Int, B::Int, 
    m::Real, rRB::Int,
    T::Real,LB::Real,
    file::String, rotor::String, superfluid::String;
    U::Unit{Float64}=Atomic·µÅ, L2l::Real=1.0, E2e::Real=1.0)

    RB = fld(B,rRB)

    @unpack m‚Çë, ƒß, E·µÅ‚Çñ = U
    Œ≤ = 1/(E·µÅ‚Çñ*T)
    œÑ = Œ≤/B

    println("$(1.4387752224LB/(T*RB))")
    
    return SuperfluidRotor(
        N,B,m,rRB,œÑ,E2e,
        LinearRotor(1.4387752224LB/(T*RB)),
        set_potention(load(file)[rotor];L2l),
        set_potention(load(file)[superfluid];L2l)
        )
end

function (Problem::SuperfluidRotor)(œÜ)
    @unpack N, B, m, rRB, œÑ, Linear_rotor, rotor, superfluid,E2e = Problem
    œÜm = 3N*B
    RB = fld(B,rRB)
    RxŒ∏ = reshape(œÜ[œÜm+1:end],5,RB)
    RŒ∏ = RxŒ∏[4:5,:]
    Rx = RxŒ∏[1:3,:]
    Œ≤E = (
        Œ≤ùëá‚Çô(Rx,m,RB,œÑ) +
        ùëá·¥±_B2019(reshape(œÜ[begin:œÜm],3,B,N),N,B,œÑ) - 
        ùëà_SuperfluidRotor(
            reshape(œÜ[begin:œÜm],3,B,N),
            Rx,RŒ∏,
            N,B,rRB,œÑ,
            Linear_rotor,rotor,superfluid;E2e))
    return Œ≤E
end

function ùëà_SuperfluidRotor(x,Rx,RŒ∏,N::Int,B::Int,rRB::Int,œÑ::Real,Linear_rotor,rotor,superfluid;E2e=1.0)
    U1 = 0.0
    U2 = 0.0
    Œ≤U3 = 0.0

    Œ≤U3 += sum(@. log(Linear_rotor(RŒ∏[:,1]-RŒ∏[:,fld(B,rRB)])))
    for rb in 2:fld(B,rRB)
        Œ≤U3 += sum(@. log(Linear_rotor(RŒ∏[:,rb]-RŒ∏[:,rb-1])))
    end

    for i in 1:N
        for b in 1:B
            rb = fld(b+rRB-1,rRB)
            rx = (x[:,b,i].-Rx[:,rb])
            r = norm(rx)
            cosŒ∏ = ix_rot_yz(rx,RŒ∏[:,rb])/r
            U1 += (r > 70.0 ? Inf : rotor(r,cosŒ∏))
    end end

    for i in 2:N
        for j in 1:i-1
            for b in 1:B
                U2 += superfluid(norm(x[:,b,i].-x[:,b,j]))
    end end end

    return (U1+U2)*œÑ*E2e + Œ≤U3
end

function Œ≤ùëà_Rotor(Œ∏::Array)
    U = 0.0
    for i in eachindex(Œ∏)
        U += A(Œ∏[i])
    end
    return U
end
